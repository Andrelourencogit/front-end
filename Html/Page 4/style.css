/* Grid Container */
.grid {
	display: grid;
}

.grid-template-columns {
    grid-template-columns: 200px 200px;
    
}

.grid-template-columns-3 {
	grid-template-columns: 1fr 2fr 1fr;
}

.subgrid {
	display: grid;
	grid-template-columns: 1fr 1fr 1fr;
	grid-gap: 10px;
}

.subgrid > div {
	background: rgba(0,0,0,.3);
}

/* Estilos Gerais */
.item {
	margin: 5px;
	background: tomato;
	text-align: center;
	font-size: 1.5em;
}

.grid {
	max-width: 400px;
	margin: 0 auto;
	border: 1px solid #ccc;
}

h1 {
	text-align: center;
	font-size: 1.25em;
	font-weight: normal;
}

body {
	font-family: monospace;
	color: #333;
	margin: 0px;
	padding-bottom: 60px;
}

body > div {
	padding: 40px 0;
}

body > div:nth-of-type(even) {
	background: rgba(0,0,0,.03);
}
 .grid-teste{
    display: grid;
    grid-template-areas: "logo nav nav"
    "sidenav content advert" "sidenav footer footer";

 }

/*
display

Define o elemento como um grid container.


    display: grid; // Torna o elemento um grid container.
    display: inline-grid; // Torna o elemento um grid container porém com comportamento inline.
    display: subgrid; // Para grids dentro de grids (ainda não é suportado, porém você pode normalmente colocar display: grid; no grid dentro do grid que funciona).

grid-template-columns

Define o número total de colunas que serão criadas no grid.

    grid-template-columns: 100px 100px 100px 100px; // Quatro colunas de 100px de largura são criadas
    grid-template-columns: 1fr 2fr; // Duas colunas são criadas, sendo a segunda com o dobro do tamanho da primeira. fr é uma unidade fracional. O tamanho do conteúdo é respeitado, ou seja, se o conteúdo na primeira coluna for maior que o da segunda, a primeira será maior.
    grid-template-columns: minmax(200px, 1fr) 1fr 1fr; // Três colunas são criadas, a primeira terá no mínimo 200px de largura e no máximo 1fr(isso significa que após 200px ela se expande da mesma forma que as outras colunas). As outras duas colunas vão ter 1fr.
    grid-template-columns: repeat(3, 1fr); // Cria 3 colunas com 1fr de tamanho. O repeat seria a mesma coisa que escrever 1fr 1fr 1fr.
    grid-template-columns: repeat(auto-fit, minmax(100px, auto)); // Cria automaticamente um total de colunas que acomode itens com no mínimo 100px de largura.


    grid-template-rows

Define a quantidade de linhas no grid.

    grid-template-rows: 50px 100px 50px 150px; // Cria 4 linhas no grid, sendo a primeira com 50px, segunda 100px, terceira 50px e quarta 150px. Caso o grid necessite de mais linhas, elas terão o tamanho de acordo com o conteúdo.
    grid-template-rows: 1fr 2fr; // Cria 2 linhas no grid, sendo a segunda com cerca de duas vezes o tamanho da primeira.


grid-template
    Atalho para definir o grid-template-columns, 
    grid-template-rows e grid-template-areas.
grid-template:
"logo nav nav" 50px
"sidenav content advert" 150px
"sidenav footer footer" 100px
/ 100px 1fr 50px; // A primeira linha com 50px, segunda com 150px e terceira com 100px. A primeira coluna com 100px, a segunda 1fr e a terceira com 50px.

Define o gap (gutter,espaço entre os elementos) entre os elementos do grid.

    grid-gap: 20px// Define 20px entre os elementos do grid (linha e coluna).
    grid-column-gap: 20px// Define 20px de distântica entre as colunas.
    grid-row-gap: 20px// Define 20px de distântica entre as linhas.


grid-auto-columns
Define o tamanho das colunas do grid implicito (gerado automaticamente, quando algum elemento é posicionado em uma coluna que não foi definida).
grid-auto-columns: 100px// As colunas implicitas, geradas automaticamente, terão 100px de largura.


grid-auto-rows
Define o tamanho das linhas do grid implicito (gerado automaticamente, quando algum elemento é posicionado em uma linha que não foi definida).
grid-auto-rows: 100px// As linhas implicitas, geradas automaticamente, terão 100px de altura

grid-auto-flow

Define o fluxo dos itens no grid. Se eles vão automaticamente gerar novas linhas ou colunas.

    grid-auto-flow: row// Automaticamente gera novas linhas.
    grid-auto-flow: column// Automaticamente gera novas colunas.
    grid-auto-flow: dense// Tenta posicionar o máximo dos elementos que existirem nas primeiras partes do grid (pode desorganizar o conteúdo).


    grid

Atalho geral para definir o grid: grid-template-rows, grid-template-columns, grid-template-areas, grid-auto-rows, grid-auto-columns e grid-auto-flow


    grid: 100px / 1fr 1fr// Gera uma linha com 100px de altura e 2 colunas com 1fr.
    grid: 100px / auto-flow 100px 50px// Gera uma linha com 100px de altura. O grid-auto-flow é definido como column (pois está logo antes da definição das colunas). Ele também define o grid-auto-columns com 100px 50px


    justify-content

Justifica os itens do grid em relação ao eixo x (horizontal).


    justify-content: start// Justifica os itens ao início.
    justify-content: end// Justifica os itens ao final.
    justify-content: stretch// Estica os itens.
    justify-content: space-around// Distribui espaço entre os elementos. (O início e final são menores que os espaços internos).
    justify-content: space-between// Cria um espaço entre os elementos, ignorando o início e final.
    justify-content: space-evenly// Cria um espaço igual entre as colunas (no início e final também).
    justify-content: center// Centraliza o conteúdo.

*/